let
  token_uri = "https://login.windows.net/" & #"Azure AD Tenant ID" & "/oauth2/token",
  resource = "https://graph.microsoft.com",
  tokenResponse = Json.Document(Web.Contents(token_uri,
    [
        Content = Text.ToBinary(Uri.BuildQueryString(
            [
                client_id = #"Azure Application Client ID",
                resource = resource,
                grant_type = "client_credentials",
                client_secret = #"Azure Application Client Secret"
            ]
        )),
        Headers = [Accept = "application/json"], ManualStatusHandling = {400}
    ])),
  access_token = tokenResponse[access_token],
  GetMembers = (skiptoken) =>
  let
    Source = Json.Document(Web.Contents("https://graph.microsoft.com/v1.0/groups/<group ID>/members", [ RelativePath = "?$skiptoken=" & skiptoken, Headers = [ Authorization = "Bearer " & access_token ]])),    
    data = @Source[value], 
    result = try @data & @GetMembers(Text.AfterDelimiter(Source[#"@odata.nextLink"], "=")) otherwise @data   
  in
    result,
  members = GetMembers(""),
  #"Converted to table" = Table.FromList(members, Splitter.SplitByNothing(), null, null, ExtraValues.Error),
  #"Expanded Column1" = Table.ExpandRecordColumn(#"Converted to table", "Column1", {"displayName", "jobTitle", "mail", "userPrincipalName"}, {"displayName", "jobTitle", "mail", "userPrincipalName"}),
  #"Renamed columns" = Table.RenameColumns(#"Expanded Column1", {{"displayName", "Staff name"}, {"jobTitle", "Job title"}, {"mail", "Email"}, {"userPrincipalName", "User principal name"}}),
  #"Replaced value" = Table.ReplaceValue(#"Renamed columns", each [Email], each if [Email] = null then [User principal name] else [Email], Replacer.ReplaceValue, {"Email"}),
  #"Changed column type" = Table.TransformColumnTypes(#"Replaced value", {{"Staff name", type text}, {"Job title", type text}, {"Email", type text}, {"User principal name", type text}}),
  #"Lowercased text" = Table.TransformColumns(#"Changed column type", {{"Email", each Text.Lower(_), type text}}),
  #"Inserted text before delimiter" = Table.AddColumn(#"Lowercased text", "JoinKey", each Text.BeforeDelimiter([Email], "@", 0), type text),
  #"Marked key columns" = Table.AddKey(#"Inserted text before delimiter", {"JoinKey"}, false)
in
  #"Marked key columns"